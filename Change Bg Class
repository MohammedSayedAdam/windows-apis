using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using Microsoft.Win32;
using System.Threading;
namespace Inspire_Task
{
    class ChangeBackground
    {
        //for BG Image Api
        [DllImport("user32.dll")]
        private static extern bool SystemParametersInfo(UInt32 action, UInt32 uParam, string vParam, UInt32 winIni);
        //flags to update and set wallpapper
        UInt32 SPI_SETWALL = 0x14;
        UInt32 SPIF_UPDATE = 0x01;
        UInt32 SPIF_SWEDWINI = 0x2;
        OpenFileDialog op = new OpenFileDialog();
        private string filePath;
        bool clicked;
        public string Broswe_Image(PictureBox pictureBox1)
        {
            if (op.ShowDialog() == DialogResult.OK)
            {
                filePath = op.FileName;
                pictureBox1.Image = Image.FromFile(filePath);
            }
            clicked = true;
            return filePath;
        }
      
        
        public void ChangBGImage()
        {
            
            if(SystemParametersInfo(SPI_SETWALL, 0, filePath, SPIF_UPDATE | SPIF_SWEDWINI) && clicked)
            {
                MessageBox.Show("bg image updated sucessfully");
            }
            else
            {
                MessageBox.Show("bg image dosen't updated sucessfully");
            }
            
        }
        public static void SetColor(Color color)
        {

            // Remove the current wallpaper
            NativeMethods.SystemParametersInfo(
                NativeMethods.SPI_SETDESKWALLPAPER,
                0,
                "",
                NativeMethods.SPIF_UPDATEINIFILE | NativeMethods.SPIF_SENDWININICHANGE);

            // Set the new desktop solid color for the current session
            int[] elements = { NativeMethods.COLOR_DESKTOP };
            int[] colors = { System.Drawing.ColorTranslator.ToWin32(color) };
            NativeMethods.SetSysColors(elements.Length, elements, colors);

            // Save value in registry so that it will persist
            RegistryKey key = Registry.CurrentUser.OpenSubKey("Control Panel\\Colors", true);
            key.SetValue(@"Background", string.Format("{0} {1} {2}", color.R, color.G, color.B));
        }

        private static class NativeMethods
        {
            public const int COLOR_DESKTOP = 1;
            public const int SPI_SETDESKWALLPAPER = 20;
            public const int SPIF_UPDATEINIFILE = 0x01;
            public const int SPIF_SENDWININICHANGE = 0x02;
            [DllImport("user32.dll")]
            public static extern bool SetSysColors(int cElements, int[] lpaElements, int[] lpaRgbValues);
            [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
            public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);
        }
    }
}
